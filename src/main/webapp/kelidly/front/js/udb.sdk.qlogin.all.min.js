// JavaScript Document
(function() {
    var acceptURL = (location.protocol == "https:" ? "https:": "http:") + "//ylog.hiido.com/j.gif";
    var browser = (function() {
        var ua = navigator.userAgent.toLowerCase();
        var external = '';
        try {
            external = window['external'] || '';
        } catch(ex) {
            external = '';
        }
        var core, m, extra, version, os;
        var numberify = function(s) {
            var c = 0;
            return parseFloat(s.replace(/\./g,
            function() {
                return (c++==1) ? '': '.';
            }));
        };
        try {
            if ((/windows|win32/i).test(ua)) {
                os = 'windows';
            } else if ((/macintosh/i).test(ua)) {
                os = 'macintosh';
            } else if ((/rhino/i).test(ua)) {
                os = 'rhino';
            }
            if ((m = ua.match(/applewebkit\/([^\s]*)/)) && m[1]) {
                core = 'webkit';
                version = numberify(m[1]);
            } else if ((m = ua.match(/presto\/([\d.]*)/)) && m[1]) {
                core = 'presto';
                version = numberify(m[1]);
            } else if (m = ua.match(/msie\s([^;]*)/)) {
                core = 'trident';
                version = 1.0;
                if ((m = ua.match(/trident\/([\d.]*)/)) && m[1]) {
                    version = numberify(m[1]);
                }
            } else if (/gecko/.test(ua)) {
                core = 'gecko';
                version = 1.0;
                if ((m = ua.match(/rv:([\d.]*)/)) && m[1]) {
                    version = numberify(m[1]);
                }
            }
            if (/world/.test(ua)) {
                extra = 'world';
            } else if (/360se/.test(ua)) {
                extra = '360';
            } else if ((/maxthon/.test(ua)) || typeof external.max_version == 'number') {
                extra = 'maxthon';
            } else if (/tencenttraveler\s([\d.]*)/.test(ua)) {
                extra = 'tt';
            } else if (/se\s([\d.]*)/.test(ua)) {
                extra = 'sogou';
            }
        } catch(e) {}
        var ret = {
            'OS': os,
            'CORE': core,
            'Version': version,
            'EXTRA': (extra ? extra: false),
            'IE': /msie/.test(ua),
            'OPERA': /opera/.test(ua),
            'MOZ': /gecko/.test(ua) && !/(compatible|webkit)/.test(ua),
            'IE5': /msie 5 /.test(ua),
            'IE55': /msie 5.5/.test(ua),
            'IE6': /msie 6/.test(ua),
            'IE7': /msie 7/.test(ua),
            'IE8': /msie 8/.test(ua),
            'IE9': /msie 9/.test(ua),
            'IE10': /msie 10/.test(ua),
            'IE11': /msie 11/.test(ua),
            'SAFARI': !/chrome\/([\d.]*)/.test(ua) && /\/([\d.]*) safari/.test(ua),
            'CHROME': /chrome\/([\d.]*)/.test(ua),
            'IPAD': /\(ipad/i.test(ua),
            'IPHONE': /\(iphone/i.test(ua),
            'ITOUCH': /\(itouch/i.test(ua),
            'MOBILE': /mobile/i.test(ua)
        };
        var arr = ["IE5", "IE55", "IE6", "IE7", "IE8", "IE9", "IE10", "IE11", "SAFARI", "OPERA", "MOZ", "CHROME"];
        var type = "OTHER";
        for (var i = 0; i < arr.length; i++) {
            if (ret[arr[i]]) {
                type = arr[i];
                break;
            }
        }
        ret.type = type;
        return ret;
    })();
    var cookie = (function() {
        var that = {
            set: function(sKey, sValue, oOpts) {
                var arr = [];
                var d, t;
                var cfg = {
                    'expire': null,
                    'path': '/',
                    'domain': null,
                    'secure': null,
                    'encode': true
                };
                for (var p in cfg) {
                    if (p in oOpts) {
                        cfg[p] = oOpts[p];
                    }
                }
                if (cfg.encode == true) {
                    sValue = escape(sValue);
                }
                arr.push(sKey + '=' + sValue);
                if (cfg.path != null) {
                    arr.push('path=' + cfg.path);
                }
                if (cfg.domain != null) {
                    arr.push('domain=' + cfg.domain);
                }
                if (cfg.secure != null) {
                    arr.push(cfg.secure);
                }
                if (cfg.expire != null) {
                    d = new Date();
                    t = d.getTime() + cfg.expire * 3600000;
                    d.setTime(t);
                    arr.push('expires=' + d.toGMTString());
                }
                document.cookie = arr.join(';');
            },
            get: function(sKey) {
                sKey = sKey.replace(/([\.\[\]\$])/g, '\\\$1');
                var rep = new RegExp(sKey + '=([^;]*)?;', 'i');
                var co = document.cookie + ';';
                var res = co.match(rep);
                if (res) {
                    return res[1] || "";
                } else {
                    return '';
                }
            },
            remove: function(sKey, oOpts) {
                oOpts = oOpts || {};
                oOpts.expire = -10;
                that.set(sKey, '', oOpts);
            }
        };
        return that;
    })();
    var sendLogin = function(data, callback, timeout) {
        var def = {
            act: "webudblogineffect",
            suc: 0,
            des: '未初始化值',
            ct: 0,
            st: new Date().getTime(),
            browser: browser.type,
            appid: 0,
            time: Math.floor(new Date().getTime() / 1000)
        }
        for (var p in def) {
            if (data[p] == null) {
                data[p] = def[p];
            }
        }
        var query = "act=" + encodeURIComponent(data['act']) + "&suc=" + encodeURIComponent(data['suc']) + "&des=" + encodeURIComponent(data['des']) + "&ct=" + encodeURIComponent(data['ct']) + "&st=" + encodeURIComponent(data['st']) + "&browser=" + encodeURIComponent(data['browser']) + "&appid=" + encodeURIComponent(data['appid']) + "&time=" + encodeURIComponent(data['time']);
        send(query, callback, timeout);
    }
    var sendEvent = function(data, callback, timeout) {
        var ui = cookie.get("hiido_ui");
        ui = ui == '' ? Math.random() : ui;
        var uid = cookie.get("yyuid");
        var username = cookie.get("username");
        var def = {
            "act": "webevent",
            "time": Math.floor(new Date().getTime() / 1000),
            "ui": ui,
            "username": "",
            "eventid": "",
            "value": "1",
            "class1": "udb",
            "class2": "ad",
            "eventype": "1",
            "uid": uid,
            "username": username,
            "bak1": "",
            "bak2": "",
            "bak3": "",
            "parm1": "",
            "parm2": "",
            "parm3": ""
        }
        for (var p in def) {
            if (data[p] == null) {
                data[p] = def[p];
            }
        }
        var query = "act=" + encodeURIComponent(data['act']) + "&time=" + encodeURIComponent(data['time']) + "&ui=" + encodeURIComponent(data['ui']) + "&username=" + encodeURIComponent(data['username']) + "&eventid=" + encodeURIComponent(data['eventid']) + "&value=" + encodeURIComponent(data['value']) + "&class1=" + encodeURIComponent(data['class1']) + "&class2=" + encodeURIComponent(data['class2']) + "&eventype=" + encodeURIComponent(data['eventype']) + "&uid=" + encodeURIComponent(data['uid']) + "&username=" + encodeURIComponent(data['username']) + "&bak1=" + encodeURIComponent(data['bak1']) + "&bak2=" + encodeURIComponent(data['bak2']) + "&bak3=" + encodeURIComponent(data['bak3']) + "&parm1=" + encodeURIComponent(data['parm1']) + "&parm2=" + encodeURIComponent(data['parm2']) + "&parm3=" + encodeURIComponent(data['parm3']);
        send(query, callback, timeout);
    }
    var send = function(query, callback, timeout) {
        var called = false;
        var img = new Image();
        timeout = timeout ? timeout: 500;
        var cb = function() {
            if (called || (callback == null)) {
                return;
            }
            called = true;
            try {
                callback();
            } catch(ex) {}
        }
        img.onreadystatechange = function() {
            if (img.readyState == "complete" || img.readyState == "loaded") {
                cb();
            }
        }
        img.onload = function() {
            if (img.complete == true) {
                cb();
            }
        }
        img.onerror = cb;
        img.src = acceptURL + "?" + query;
        setTimeout(cb, timeout);
    }
    window.UDBHiidoStatistics = {
        send: send,
        sendLogin: sendLogin,
        sendEvent: sendEvent,
        browser: browser
    }
})();
String.prototype.startsWith = function(str) {
    var reg = new RegExp("^" + str);
    return reg.test(this);
};
String.prototype.endsWith = function(str) {
    var reg = new RegExp(str + "$");
    return reg.test(this);
}; (function() {
    function namespace(str, root) {
        if (!str) return null;
        var a = str.split("."),
        i,
        p = root || this,
        k;
        for (i = 0; i < a.length; i++) {
            k = a[i];
            if (!k) break;
            if (!p[k]) {
                p[k] = {};
            }
            p = p[k];
        }
        return p;
    }
    var NameSpace = namespace("UDB");
    NameSpace.namespace = namespace;
    NameSpace.extend = function(r, s, override) {
        var p;
        for (p in s) {
            if (override === true || !(p in r)) {
                r[p] = s[p];
            }
        }
        return r;
    };
    var Dom = NameSpace.namespace("dhtml.Dom");
    NameSpace.extend(Dom, {
        inlineStyleSheet: function(cssText) {
            var stylesheet;
            if (document.createStyleSheet) {
                stylesheet = document.createStyleSheet();
                if (cssText) {
                    stylesheet.cssText = cssText;
                }
            } else {
                stylesheet = document.createElement("style");
                if (cssText) {
                    stylesheet.appendChild(document.createTextNode(cssText));
                }
                document.getElementsByTagName("head")[0].appendChild(stylesheet);
            }
            return stylesheet;
        },
        appendCSS: function(cssText) {
            var styleSheet = Dom._inlineStyleSheet;
            if (styleSheet) {
                if (document.createStyleSheet) {
                    styleSheet.cssText += cssText;
                } else {
                    styleSheet.appendChild(document.createTextNode(cssText));
                }
            } else {
                Dom._inlineStyleSheet = Dom.inlineStyleSheet(cssText);
            }
        }
    },
    true);
})(); (function($) {
    var NameSpace = UDB;
    var StringUtils = {
        isEmpty: function(str) {
            if (str == null || str.length == 0) return true;
            return false;
        },
        isNotEmpty: function(str) {
            return ! StringUtils.isEmpty(str);
        },
        end: function() {}
    };
    var LoadJSAndCSS = {
        loadCSS: function(path) {
            if (StringUtils.isEmpty(path)) return;
            var head = document.getElementsByTagName('head')[0];
            var link = document.createElement('link');
            link.href = path;
            link.rel = 'stylesheet';
            link.type = 'text/css';
            head.appendChild(link);
		
        },
        loadJS: function(path) {
            if (StringUtils.isEmpty(path)) return;
            var head = document.getElementsByTagName('head')[0];
            var script = document.createElement('script');
            script.src = path;
            script.type = 'text/javascript';
            head.appendChild(script);
        },
        end: function() {}
    };
    NameSpace.namespace("common").StringUtils = StringUtils;
    NameSpace.namespace("common").LoadJSAndCSS = LoadJSAndCSS;
})(jQuery); (function($) {
    var NameSpace = UDB;
    var QLogin = {
        initialize: function() {
            if (QLogin.createLoginArea()) {
                QLogin.createOpraCookieArea();
                QLogin.loadFixJSAndCSS();
            }
        },
        
/*    	<object id="myId" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="300" height="140">
		<param name="movie" value="test.swf" />
		<!--[if !IE]>-->
		<object type="application/x-shockwave-flash" data="test.swf" width="300" height="140">
		<!--<![endif]-->
		<div>
			<h1>Alternative content</h1>
			<p><a href="http://www.adobe.com/go/getflashplayer"><img src="http://www.adobe.com/images/shared/download_buttons/get_flash_player.gif" alt="Get Adobe Flash player" /></a></p>
		</div>
		<!--[if !IE]>-->
		</object>
		<!--<![endif]-->
	</object>*/
        createLoginArea: function() {
            var loginDiv = document.getElementById("udbsdk_login_normal");
            if (UDB.common.StringUtils.isNotEmpty(loginDiv)) return false;
            var $loginArea = $('<div id="udbsdk_login_normal" width="800px" height="800px" class="udbsdk_login">' + '<embed id="swfid" src="swf1/desktop3dshow.swf" allowfullscreen="true" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" align="middle">' + '</div>');
            $(document.body).append($loginArea);

            return true;
        },
        

        createOpraCookieArea: function() {
            var deleteCookieFrm = document.getElementById("udbsdk_deleteCookieFrm_normal");
            if (UDB.common.StringUtils.isNotEmpty(deleteCookieFrm)) return false;
            var $opCookieArea = $('<div id="udbsdk_cookieFrm" style="width:0px;height:0px;">' + '<iframe id="udbsdk_writeCookieFrm_normal" src="about:blank" frameborder="0" scrolling="no" style="width:0px;height:0px;"></iframe>' + '<iframe id="udbsdk_deleteCookieFrm_normal" src="about:blank" frameborder="0" scrolling="no" style="width:0px;height:0px;"></iframe>' + '</div>');
            $(document.body).append($opCookieArea);
            return true;
        },
        loadFixJSAndCSS: function() {
            var rs = "http://res.udb.duowan.com";
            UDB.common.LoadJSAndCSS.loadCSS( "css/qlogin.css");
        },
        open: function(swfurl,w,h) {

        	var $swfid = $("#swfid");
        	$swfid.attr({src:swfurl});
        	$swfid.css({width:w,height:h+120});
        	//$("#udbsdk_login_normal").width(w+220+'px').height(h+220+'px');
            QLogin.show_div();
            //var reqURL = swfurl;
            //reqURL = reqURL + "&UIStyle=qlogin&rdm=" + Math.random();
            //$("#udbsdk_frm_normal").attr("src", reqURL);
        },
        show_div: function() {
            var u = navigator.userAgent;
            if ( !! u.match(/AppleWebKit.*Mobile.*/) || !!u.match(/AppleWebKit/) || !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/) || !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/)) {
                $.uiwidget.Popup.prototype.isipScroll = true;
            }
            $.uiwidget.popupShow({
                id: "udbsdk_login_normal"
            });
            if (window['UDBHiidoStatistics'] != null) {
                var hiidoData = {
                    suc: 3,
                    des: '显示浮层',
                    appid: ''
                }
                UDBHiidoStatistics.sendLogin(hiidoData, null, 30000);
            }
        },
        hide_div: function() {
            $.uiwidget.popupHide({
                id: "udbsdk_login_normal"
            });
        },
        ajaxOpen: function(wakeLoginURL, callbackURL, denyCallbackURL) {
            $.post(wakeLoginURL, {
                "callbackURL": callbackURL,
                "denyCallbackURL": denyCallbackURL
            },
            function(data) {
                if ("1" == data.success) {
                    QLogin.open(data.url);
                } else {
                    alert(data.errMsg);
                }
            },
            "json");
        },
        ajaxOpenWithSaveToken: function(swfurl,w,h) {

        
                  //  QLogin.writeCookie("udboauthtmptokensec", data.ttokensec, document.domain, "/");
                    QLogin.open(swfurl,w,h);
       

        },
        writeCrossmainCookie: function(writeCookieURL) {
            QLogin.writeCrossmainCookieWithCallBack(writeCookieURL, null);
        },
        writeCrossmainCookieWithCallBack: function(writeCookieURL, callBack) {
            if (writeCookieURL == null || writeCookieURL == "") return;
            var url = writeCookieURL + "&rdm=" + Math.random();
            var $wFrm = $("#udbsdk_writeCookieFrm_normal");
            $wFrm.attr("src", url);
            if (callBack) {
                $wFrm.load(callBack);
            }
        },
        deleteCrossmainCookie: function(deleteCookieURL) {
            QLogin.deleteCrossmainCookieWithCallBack(deleteCookieURL, null);
        },
        deleteCrossmainCookieWithCallBack: function(deleteCookieURL, callBack) {
            if (deleteCookieURL == null || deleteCookieURL == "") return;
            var url = deleteCookieURL + "&rdm=" + Math.random();
            var $delFrm = $("#udbsdk_deleteCookieFrm_normal");
            $delFrm.attr("src", url);
            QLogin.deleteCookie("oauthCookiePrivate", document.domain, "/");
            QLogin.deleteCookie("udboauthtmptokensec", document.domain, "/");
            if (callBack) {
                $delFrm.load(callBack);
            }
        },
        deleteCookie: function(name, domain, path) {
            if (!QLogin.hasCookie(name)) return;
            var expdate = new Date();
            expdate.setTime(expdate.getTime() - (86400 * 1000));
            document.cookie = name + "=_" + ";expires=" + expdate.toGMTString() + ";domain=" + domain + ";path=" + path;
        },
        writeCookie: function(name, value, domain, path) {
            var expdate = new Date();
            expdate.setTime(expdate.getTime() + (15 * 60 * 1000));
            document.cookie = name + "=" + value + ";expires=" + expdate.toGMTString() + ";domain=" + domain + ";path=" + path;
        },
        hasCookie: function(name) {
            if (document.cookie.length > 0) {
                start = document.cookie.indexOf(name + "=");
                if (start != -1) return true;
            }
            return false;
        },
        getCookieVal: function(cookieName) {
            var arrstr = document.cookie.split("; ");
            for (var i = 0; i < arrstr.length; i = i + 1) {
                var kv = arrstr[i].split("=");
                if (kv[0] == cookieName) return decodeURIComponent(kv[1]);
            }
            return "";
        },
        end: ""
    };
    NameSpace.namespace("sdk").QLogin = QLogin;
    $(document).ready(function() {
        QLogin.initialize();
    });
})(jQuery); (function($) {
    var NameSpace = UDB;
    var DiscoverLogin = {
        users: [],
        useType: 0,
        markSys: "-5",
        rtoken: "-1",
        qinUrl: "https://udb.duowan.com/oauth/server/login_q.do",
        denyCallbackURL: "",
        cbFunc: null,
        cbFuncDone: -1,
        yyuid: -1,
        _init: function() {
            if (!this.xInitCheckerFlag) {
                this.c = null;
                var checkPluginFlag = PluginSniffer.hasPlugin('application/x-checker', 'yy_checker.Checker');
                if (checkPluginFlag) {
                    try {
                        if ("ActiveXObject" in window) {
                            this.c = new ActiveXObject('yy_checker.Checker');
                        } else {
                            this._initPlugin4NonIE();
                            this.c = this._plugin4NonIE();
                            if (!this._pluginValid4NonIE()) {
                                this.c = null;
                            }
                        }
                    } catch(ex) {
                        this.c = null;
                    }
                }
                this.xInitCheckerFlag = true;
            }
            return this.c;
        },
        _initPlugin4NonIE: function() {
            if (this.xInitPulgin4NonIEFlag) return;
            var $pluginArea = $('<object id="udbyyplugin" type="application/x-checker" width="0" height="0">');
            $(document.body).append($pluginArea);
            this.xInitPulgin4NonIEFlag = true;
        },
        _plugin4NonIE: function() {
            return document.getElementById('udbyyplugin');
        },
        _pluginValid4NonIE: function() {
            return this._plugin4NonIE().valid;
        },
        _getYYList: function() {
            this._init();
            this.users = [];
            if (this.c) {
                this.c.GetYYList();
            }
        },
        _getTicket: function(yyid) {
            this.c.getUDBTicket(yyid, DiscoverLogin.markSys);
        },
        _initLayer: function() {
            this._jList = $(".yy-account-list");
            $(".q-login-btn", this._jLayer).click(function(e) {
                var uListEl = DiscoverLogin._jList[0];
                var inputEls = uListEl.getElementsByTagName("input");
                var inputEl, selectedRadioEl;
                for (var i = 0,
                len = inputEls.length; i < len; i++) {
                    inputEl = inputEls[i];
                    if (inputEl && (inputEl.type == "radio") && inputEl.checked) {
                        selectedRadioEl = inputEl;
                        break;
                    }
                }
                if (selectedRadioEl) {
                    var doFun = function() {
                        DiscoverLogin._getTicket(selectedRadioEl.value);
                        setTimeout(function() {
                            if (DiscoverLogin.cbFuncDone == -1) {
                                $('#x-login').hide();
                                $('#lay_wrap').show();
                                $('#errorinfo').find('span').text('登录超时，请重新登录.');
                                $('#errorinfo').show();
                                $('#quick-change').hide();
                            }
                        },
                        4000);
                    }
                    if (window['UDBHiidoStatistics'] != null) {
                        var hiidoData = {
                            suc: 0,
                            des: '提交快速登录',
                            appid: window['appid'] == null ? '': appid
                        }
                        UDBHiidoStatistics.sendLogin(hiidoData, doFun);
                    } else {
                        doFun();
                    }
                }
                return false;
            });
            $("a.layer-close", this._jLayer).click(function(e) {
                e.preventDefault();
                DiscoverLogin._hide();
            });
            $(window).resize(function() {
                DiscoverLogin._adjustOffset();
            });
            if (!$.support.fixedPosition) {
                $(window).scroll(function() {
                    DiscoverLogin._adjustOffset();
                });
            }
        },
        _show: function() {
            this._initLayer();
            this._jList.empty();
            var users = this.users,
            user;
            for (var i = 0; i < users.length; i++) {
                user = users[i];
                var itemEl = document.createElement("p");
                try {
                    if (i < 1) {
                        radioEl = document.createElement('<input type="radio" name="u-login-name" checked/>');
                    } else {
                        radioEl = document.createElement('<input type="radio" name="u-login-name"/>');
                    }
                } catch(ex) {
                    radioEl = document.createElement("input");
                    radioEl.type = "radio";
                    radioEl.name = "u-login-name";
                    if (i < 1) {
                        radioEl.checked = true;
                    }
                }
                radioEl.value = user.id;
                itemEl.appendChild(radioEl);
                nameEl = document.createElement("label");
                nameEl.htmlFor = radioEl.id = "x-login-radio-name-" + i;
                nameEl.innerHTML = "<span>" + user.name.replace(/</g, '&lt;').replace(/>/g, '&gt;') + "</span> (" + user.yy + ")";
                itemEl.appendChild(nameEl);
                this._jList.append(itemEl);
            }
            $('#x-login .yy-account-list').fadeIn();
        },
        _hide: function() {
            if (this._jLayer) {
                this._jLayer.hide();
            }
        },
        _adjustOffset: function() {
            var jLayer = this._jLayer;
            if (!jLayer || jLayer.css("display") == "none") return;
            var doc = document.documentElement,
            bd = document.body;
            var left = Math.floor(((doc.clientWidth || bd.clientWidth) - jLayer.width()) / 2);
            var top = Math.floor(((doc.clientHeight || bd.clientHeight) - jLayer.height()) / 2);
            if (!$.support.fixedPosition) {
                left += doc.scrollLeft || bd.scrollLeft;
                top += doc.scrollTop || bd.scrollTop;
            }
            jLayer.css("left", left);
            jLayer.css("top", top);
        },
        YYCallback: function(msgId, markid, callbackText) {
            var parts = callbackText.split("\n");
            if (msgId != 0) {
                var ticket = parts[3].split(":")[1];
                if (DiscoverLogin.useType == 0) {
                    DiscoverLogin.cbFuncDone = 1;
                    DiscoverLogin._resYYCallback4QLogin(markid, ticket);
                    return;
                }
                if (DiscoverLogin.useType == 2) {
                    DiscoverLogin.cbFuncDone = 1;
                    DiscoverLogin.cbFunc(ticket);
                    return;
                }
            } else {
                if (DiscoverLogin.useType == 0) {
                    var user_yy = parts[1].split(":")[1],
                    user_name = parts[2].substring(parts[2].indexOf(':') + 1),
                    uuid = parts[3].split(":")[1];
                    if (uuid == 0) return;
                    var user = {
                        yy: user_yy,
                        name: user_name,
                        id: markid,
                        uid: uuid
                    },
                    users = DiscoverLogin.users,
                    exist = false;
                    for (var i = 0; i < users.length; i++) {
                        if (users[i].yy == user_yy) {
                            users[i] = user;
                            exist = true;
                            break;
                        }
                    }
                    if (!exist) users.push(user);
                    return;
                }
                if (DiscoverLogin.useType == 1) {
                    if (DiscoverLogin.cbFuncDone == -1) {
                        DiscoverLogin.cbFuncDone = 1;
                        DiscoverLogin.cbFunc(1);
                    }
                    return;
                }
                if (DiscoverLogin.useType == 2) {
                    if (DiscoverLogin.yyuid == parts[3].split(":")[1]) {
                        DiscoverLogin.c.getUDBTicket(markid, DiscoverLogin.markSys);
                    }
                    return;
                }
            }
        },
        _resYYCallback4QLogin: function(appid, ticket) {
            var reqURL = this.qinUrl + "?ticket=" + ticket + "&appid=" + encodeURIComponent(appid) + "&oauth_token=" + this.rtoken + "&denyCallbackURL=" + this.denyCallbackURL;
            window.location.href = reqURL;
        },
        quickLogin: function(markSys, rtoken, denyCallbackURL, otherLoginHandler) {
            if (markSys == null || markSys == "") {
                alert("Must set the  markSys");
                return;
            }
            if (rtoken == null || rtoken == "") {
                alert("Must set the  rtoken");
                return;
            }
            if (otherLoginHandler == null || otherLoginHandler == "") {
                alert("Must set the otherLoginHandler");
                return;
            }
            this.useType = 0;
            this.markSys = markSys;
            this.rtoken = rtoken;
            this.denyCallbackURL = denyCallbackURL;
            this.cbFuncDone = -1;
            this._getYYList();
            this._timeoutHandler(otherLoginHandler);
        },
        _timeoutHandler: function(otherLoginHandler) {
            setTimeout(function() {
                if (DiscoverLogin.users.length > 0) {
                    DiscoverLogin._show();
                    if (!DiscoverLogin.xBindQucikLoginByOtherFlag) {
                        $("a.login-link", DiscoverLogin._jLayer).bind('click',
                        function() {
                            try {
                                otherLoginHandler();
                                DiscoverLogin._hide();
                            } catch(ex) {}
                        });
                        DiscoverLogin.xBindQucikLoginByOtherFlag = true;
                    }
                } else {
                    try {
                        otherLoginHandler();
                        $('#quick-change').hide();
                    } catch(ex) {}
                }
            },
            350);
        },
        detectAliveYY: function(cbFunc) {
            this.useType = 1;
            this.cbFunc = cbFunc;
            this.cbFuncDone = -1;
            this._getYYList();
            if (!this.c) {
                cbFunc(0);
                return;
            }
            setTimeout(function() {
                if (DiscoverLogin.cbFuncDone == -1) cbFunc(0);
            },
            1000);
        },
        getTicket: function(yyuid, appid, cbFunc) {
            this.useType = 2;
            this.cbFunc = cbFunc;
            this.cbFuncDone = -1;
            this.yyuid = yyuid;
            DiscoverLogin.markSys = appid;
            this._getYYList();
            if (!this.c) {
                cbFunc("-1");
                return;
            }
            setTimeout(function() {
                if (DiscoverLogin.cbFuncDone == -1) cbFunc("-1");
            },
            1200);
        },
        end: function() {}
    };
    var PluginSniffer = {
        hasPlugin: function(mimeType, activexObjectName) {
            var np = navigator.mimeTypes;
            if ("ActiveXObject" in window) {
                try {
                    var axobj = eval("new ActiveXObject(activexObjectName);");
                    return axobj ? true: false;
                } catch(e) {
                    return false;
                }
            } else if (np && np.length) {
                for (var i = 0; i < np.length; i++) {
                    if (np[i].type == mimeType) return true;
                }
                return false;
            } else {
                return false;
            }
        },
        end: function() {}
    };
    window.YYCallback = DiscoverLogin.YYCallback;
    NameSpace.namespace("sdk").DiscoverLogin = DiscoverLogin;
})(jQuery);; (function(a) {
    a.uiwidget = a.uiwidget || {};
    a.uiwidget.Popup = function(c, b) {
        a.extend(this, b);
        this.target = c;
        this.init()
    };
    a.uiwidget.Popup.prototype = {
        dragEnable: false,
        showMask: true,
        display: false,
        isCenter: true,
        isipScroll: false,
        init: function() {
            var b = this;
            if (b.dragEnable && a.uiwidget.Drag) {
                b.target.drag()
            }
            b.target.css({
                position: "absolute",
                zIndex: 30002
            });
            if (b.isipScroll == false) {
                a(window).bind("resize",
                function() {
                    b.centerLayout()
                });
                a(window).bind("scroll",
                function() {
                    b.centerLayout()
                })
            }
        },
        show: function() {
            var b = this;
            b.target.show();
            b.centerLayout()
        },
        hide: function() {
            var b = this;
            if (b.showMask) {
                b.getMaskEl().hide()
            }
            b.target.hide()
        },
        centerLayout: function() {
            var c = this;
            if (c.target.css("display") == "none") {
                return
            }
            var g = (document.documentElement.scrollLeft ? document.documentElement.scrollLeft: document.body.scrollLeft);
            var f = (document.documentElement.scrollTop ? document.documentElement.scrollTop: document.body.scrollTop);
            if (c.isCenter) {
                c.target.css({
                    left: (a(window).width() - c.target.width()) / 2 + g,
                    top: (a(window).height() - c.target.height()) / 2 + f
                })
            } else {
                c.target.css({
                    left: (a(window).width() - c.target.width()) / 2 + g,
                    top: 0 + f
                })
            }
            var e = c.getMaskEl();
            var b = 0;
            if (document.documentElement.clientHeight > document.body.clientHeight) {
                b = document.documentElement.clientHeight
            } else {
                b = document.body.clientHeight
            }
            var d = document.body.scrollWidth;
            if (document.body.scrollWidth <= document.body.clientWidth) {
                d = document.body.clientWidth
            }
            if (a.browser.mozilla) {
                b = a(document).height();
                d = a(document).width()
            }
            e.width(d).height(b)
        },
        renderMask: function() {
            var b = a('<div id="popupMask' + this.id + '" class="popup-mask"></div>');
            a(document.body).append(b);
				$(".popup-mask").click(function(){
				    UDB.sdk.QLogin.hide_div();
				});
			
					
            return b
        },
        getMaskEl: function() {
            return this.maskEl || (this.maskEl = this.renderMask())
        }
    };
    a.fn.popup = function(b) {
        return new a.uiwidget.Popup(this, b)
    };
    a.uiwidget.popupShow = function(f) {
        var i = a("#" + f.id);
        var b = a.uiwidget.popup = a.uiwidget.popup || {};
        if (!b[f.id]) {
            b[f.id] = new a.uiwidget.Popup(i, f)
        }
        var e = b[f.id];
        var d = document.body.clientHeight;
        var g = document.documentElement.clientHeight;
        var j = (g <= d && g != 0) ? true: false;
        var h = j ? document.documentElement: document.body;
        var c = true;
        if (typeof(f.isScroll) == "boolean") {
            c = f.isScroll;
            e.isCenter = f.isScroll
        }
        if (!c) {
            h.style.overflow = "hidden"
        }
        e.show();
        return e
    };
    a.uiwidget.popupHide = function(c) {
        var g = a.uiwidget.popup[c.id];
        if (g) {
            if (!g.isCenter) {
                var d = document.body.clientHeight;
                var f = document.documentElement.clientHeight;
                var b = (f <= d && f != 0) ? true: false;
                var e = b ? document.documentElement: document.body;
                e.style.overflowY = "auto"
            }
            g.hide();
            a.uiwidget.popup[c.id] = null;
            a("#popupMask" + c.id).remove()
        }
    };
    a.uiwidget.showMsgbox = function(g, e, h, c) {
        var f = (document.documentElement.scrollLeft ? document.documentElement.scrollLeft: document.body.scrollLeft);
        var d = (document.documentElement.scrollTop ? document.documentElement.scrollTop: document.body.scrollTop);
        var b = document.createElement("div");
        b.className = "popup-msgbox";
        if (c == 0) {
            b.innerHTML = '<span class="fail">' + g + "</span>"
        } else {
            b.innerHTML = '<span class="success">' + g + "</span>"
        }
        document.body.appendChild(b);
        b.style.position = "absolute";
        b.style.zIndex = 20005;
        b.style.display = "block";
        b.style.left = f + ((a(window).width() - a(b).width()) / 2) + "px";
        b.style.top = d + ((a(window).height() - a(b).width()) / 2) + "px";
        window.setTimeout(function() {
            document.body.removeChild(b);
            if (h) {
                h()
            }
        },
        e)
    }
})(jQuery);
